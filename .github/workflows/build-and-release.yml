# .github/workflows/build-and-release.yml

name: Build and Release Obsidian Vault

on:
  # Allows you to run this workflow manually from the Actions tab on GitHub
  workflow_dispatch:

  # Runs on a schedule (this is set to every Sunday at 3 AM UTC)
  schedule:
    - cron: '0 3 * * 0'

  # Also runs on pushes to the main branch (useful for testing your changes)
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    # Add permissions for the job to create a release
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Create input directory
        run: mkdir -p inputs

      - name: Download latest threat intelligence data
        run: |
          curl -L -o "inputs/Threat Group Card - All groups.json" "https://apt.etda.or.th/cgi-bin/getcard.cgi?g=all&o=j"
          curl -L -o "inputs/Threat Group Card - All tools.json" "https://apt.etda.or.th/cgi-bin/getcard.cgi?t=all&o=j"
        
      - name: Verify downloaded files
        run: |
          echo "--- Verifying downloaded files ---"
          ls -lh inputs

      - name: Run Python script to generate markdown vault
        run: python main.py

      - name: Get current date for release name
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Zip the output folder for release
        id: zip
        run: |
          zip -r obsidian-vault-${{ steps.date.outputs.date }}.zip ./output
          echo "name=obsidian-vault-${{ steps.date.outputs.date }}.zip" >> $GITHUB_OUTPUT

      - name: Prepare Release Notes
        id: prep-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          # Use the GitHub CLI to get the URL of the zip asset from the latest release
          echo "Fetching latest release..."
          LATEST_RELEASE_URL=$(gh release view --json assets -q '.assets[] | select(.name | endswith(".zip")) | .url' || echo "")
          
          # File to store the body of the release notes
          NOTES_FILE=release_notes.md
          
          if [ -z "$LATEST_RELEASE_URL" ]; then
            echo "No previous release found. This is the initial build."
            echo "Initial vault build. No changes to report." > $NOTES_FILE
          else
            echo "Previous release found. Downloading and generating diff..."
            
            # Download the asset from the last release
            curl -L -o old_vault.zip "$LATEST_RELEASE_URL"
            
            # Create directories to compare
            mkdir -p old_vault_unzipped new_vault_unzipped
            
            # Unzip both archives
            unzip -q old_vault.zip -d old_vault_unzipped
            unzip -q ${{ steps.zip.outputs.name }} -d new_vault_unzipped
            
            # Remove the 'data-scraped' line from all .md files before diffing
            echo "Temporarily removing 'data-scraped' lines for accurate diff..."
            find old_vault_unzipped new_vault_unzipped -type f -name "*.md" -exec sed -i '/^data-scraped:/d' {} +

            # Remove index files from comparison
            echo "Removing index files from comparison..."
            find old_vault_unzipped new_vault_unzipped -type f -name "index-*.md" -delete
            
            # Generate the diff, ignoring the .obsidian config folder.
            # Use '|| true' to ensure the workflow doesn't fail if diff finds changes (which is expected).
            DIFF_CONTENT=$(diff -urN -x ".obsidian" old_vault_unzipped/output new_vault_unzipped/output || true)
            
            # Construct the release notes
            echo "Changes between this week and the last release, as seen by Electronic Transactions Development Agency (ETDA) of Thailand:" > $NOTES_FILE
            echo "" >> $NOTES_FILE
            echo '```diff' >> $NOTES_FILE
            if [ -z "$DIFF_CONTENT" ]; then
              echo "No content changes detected." >> $NOTES_FILE
            else
              # Use a here-string to avoid issues with special characters in the diff content
              echo "$DIFF_CONTENT" >> $NOTES_FILE
            fi
            echo '```' >> $NOTES_FILE
          fi
          
          echo "Release notes prepared:"
          cat $NOTES_FILE

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          # The name of the tag will be unique, e.g., v2024-10-27
          tag_name: v${{ steps.date.outputs.date }}
          # The name of the release in the GitHub UI
          name: Obsidian Vault Build - ${{ steps.date.outputs.date }}
          # Use the generated diff file as the body of the release
          body_path: release_notes.md
          # The files to upload as assets to the release
          files: |
            ${{ steps.zip.outputs.name }}
        env:
          # This token is provided by GitHub Actions automatically and is required
          # for the action to create a release on your behalf.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
