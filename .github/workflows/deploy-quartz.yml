# .github/workflows/update-web-content.yml

name: Update and Deploy Quartz Site on 'web' branch

on:
  # This workflow runs automatically whenever a new Release is published
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write # Needs write permission to push to branches
  pull-requests: read # Needed for gh cli to work

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: "web-deploy"
      cancel-in-progress: true
    steps:
      - name: Checkout 'web' branch
        uses: actions/checkout@v4
        with:
          # Check out the specific branch that holds the Quartz source and the deployed site
          ref: 'web'

      - name: Get latest release asset URL
        id: get-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use the GitHub CLI to find the URL of the vault zip from the triggering release
          echo "Fetching release asset from tag: ${{ github.event.release.tag_name }}"
          ASSET_URL=$(gh release view "${{ github.event.release.tag_name }}" --json assets --jq '.assets[] | select(.name | endswith(".zip")) | .url')
          echo "ASSET_URL=$ASSET_URL" >> $GITHUB_ENV
          echo "Found asset URL: $ASSET_URL"

      - name: Download and Replace Content
        run: |
          curl -L -o vault.zip "${{ env.ASSET_URL }}"
          echo "Downloaded latest release zip."
          
          echo "Clearing and recreating content directory..."
          rm -rf content
          mkdir content
          
          unzip -q vault.zip -d temp_unzip
          echo "Moving new content into place..."
          mv temp_unzip/output/* content/
          rm -rf temp_unzip vault.zip
          echo "New content successfully placed in 'content' directory."
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22 # Updated to match Quartz requirement

      - name: Install Quartz dependencies
        # This assumes your package.json is in the 'quartz' sub-directory
        run: npm --prefix ./quartz install
        
      - name: Build Quartz Website
        run: npx --prefix ./quartz quartz build

      - name: Prepare site for deployment
        run: |
          # Clean out old deployment folder and move the new build into place
          # This is served by GitHub Pages from the /docs folder on the 'web' branch
          echo "Preparing /docs folder for deployment..."
          rm -rf docs
          mv quartz/public docs

      - name: Commit and Push all changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # Add both the updated source content and the newly built site
          git add content docs
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update content and build site from release ${{ github.event.release.tag_name }}"
            git push origin web
            echo "Updated content and built site pushed to 'web' branch."
          fi
