# .github/workflows/update-web-content.yml

name: Sync Release Content to Web Branch

on:
  # This workflow runs automatically whenever a new Release is published
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write # Needs write permission to push to a branch
  pull-requests: read # Needed for gh cli to work

jobs:
  sync-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 'web' branch
        uses: actions/checkout@v4
        with:
          # Check out the specific branch we want to update
          ref: 'web'

      - name: Get latest release asset URL
        id: get-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use the GitHub CLI to find the URL of the vault zip from the triggering release
          echo "Fetching release asset from tag: ${{ github.event.release.tag_name }}"
          ASSET_URL=$(gh release view "${{ github.event.release.tag_name }}" --json assets --jq '.assets[] | select(.name | endswith(".zip")) | .url')
          echo "ASSET_URL=$ASSET_URL" >> $GITHUB_ENV
          echo "Found asset URL: $ASSET_URL"

      - name: Download and Replace Content
        run: |
          # Download the vault from the release
          curl -L -o vault.zip "${{ env.ASSET_URL }}"
          echo "Downloaded latest release zip."
          
          # This assumes your quartz setup on the 'web' branch has a 'content' directory
          echo "Clearing old content..."
          rm -rf content/*
          
          # Unzip the new vault files directly into a temporary folder
          unzip -q vault.zip -d temp_unzip
          
          # Move the contents of the 'output' folder from the zip into the 'content' directory
          echo "Moving new content into place..."
          mv temp_unzip/output/* content/
          
          # Clean up temporary files and folders
          rm -rf temp_unzip vault.zip
          
          echo "New content successfully placed in 'content' directory."
          ls -R content

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add content
          # Check if there are changes to commit to avoid empty commits
          if git diff --staged --quiet; then
            echo "No content changes to commit."
          else
            git commit -m "Update content from release ${{ github.event.release.tag_name }}"
            git push
            echo "Content changes pushed to web branch."
          fi
